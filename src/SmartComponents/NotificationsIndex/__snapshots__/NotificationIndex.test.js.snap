// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotificationsIndex expect to render an EmptyState by default (with no endpoints) 1`] = `
<withRouter(NotificationsPage)
  rightBar={
    <IndexToolbar
      onClick={[MockFunction]}
    />
  }
  title="Notifications"
>
  <LoadingState
    placeholder={
      <Skeleton
        size="lg"
      />
    }
  >
    <Bullseye
      className=""
      component="div"
    >
      <EmptyState
        className=""
      >
        <p>
          <EmptyStateIcon
            className=""
            icon={[Function]}
          />
        </p>
        <Title
          size="lg"
        >
          No Endpoins found
        </Title>
        <EmptyStateBody
          className=""
        >
          There are no endpoints configured yet.
        </EmptyStateBody>
        <Button
          aria-label={null}
          className=""
          component={[Function]}
          isActive={false}
          isBlock={false}
          isDisabled={false}
          isFocus={false}
          isHover={false}
          onClick={[MockFunction]}
          to="/new"
          type="button"
          variant="primary"
        >
          New endpoint
        </Button>
      </EmptyState>
    </Bullseye>
  </LoadingState>
</withRouter(NotificationsPage)>
`;

exports[`NotificationsIndex takes endpoints 1`] = `
<withRouter(NotificationsPage)
  rightBar={
    <IndexToolbar
      onClick={[MockFunction]}
    />
  }
  title="Notifications"
>
  <LoadingState
    placeholder={
      <Skeleton
        size="lg"
      />
    }
  >
    <div>
      <Table
        aria-label="Notifications list"
        footer={
          <Pagination
            dropDirection="down"
            itemCount={0}
            onFirstClick={[Function]}
            onLastClick={[Function]}
            onNextClick={[Function]}
            onPageInput={[Function]}
            onPerPageSelect={[Function]}
            onPreviousClick={[Function]}
            onSetPage={[Function]}
            page={1}
            perPage={10}
            perPageOptions={
              Array [
                Object {
                  "title": "10",
                  "value": 10,
                },
                Object {
                  "title": "20",
                  "value": 20,
                },
                Object {
                  "title": "50",
                  "value": 50,
                },
                Object {
                  "title": "100",
                  "value": 100,
                },
              ]
            }
            titles={
              Object {
                "currPage": "Current page",
                "items": "items",
                "itemsPerPage": "Items per page",
                "optionsToggle": "Select",
                "pages": "pages",
                "paginationTitle": "Pagination",
                "toFirstPage": "Go to first page",
                "toLastPage": "Go to last page",
                "toNextPage": "Go to next page",
                "toPreviousPage": "Go to previous page",
              }
            }
            toggleTemplate={[Function]}
            variant="bottom"
            widgetId="pagination-options-menu-bottom"
          />
        }
        header={
          Array [
            "Name",
            "Type",
            "Path",
            "Status",
            "Active",
            "",
          ]
        }
        rows={
          Array [
            Object {
              "cells": Array [
                "Test 1",
                "HTTP",
                "http://whatever.com",
                <StatusIcon
                  status={true}
                />,
                <EndpointToggle
                  active={true}
                  id={36}
                  onChange={[Function]}
                />,
                <withRouter(NotificationActions)
                  endpointId={36}
                  onDelete={[Function]}
                />,
              ],
            },
            Object {
              "cells": Array [
                "Test 2",
                "HTTP",
                "http://whatever1.com",
                <StatusIcon
                  status={true}
                />,
                <EndpointToggle
                  active={true}
                  id={37}
                  onChange={[Function]}
                />,
                <withRouter(NotificationActions)
                  endpointId={37}
                  onDelete={[Function]}
                />,
              ],
            },
            Object {
              "cells": Array [
                "Test 3",
                "HTTP",
                "http://whatever2.com",
                <StatusIcon
                  status={true}
                />,
                <EndpointToggle
                  active={true}
                  id={38}
                  onChange={[Function]}
                />,
                <withRouter(NotificationActions)
                  endpointId={38}
                  onDelete={[Function]}
                />,
              ],
            },
          ]
        }
      >
        <TableHeader />
        <TableBody />
      </Table>
    </div>
  </LoadingState>
</withRouter(NotificationsPage)>
`;
