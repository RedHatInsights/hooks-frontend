// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotificationsIndex expect to render a Table 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NotificationsIndex
    deleteEndpoint={[MockFunction]}
    endpoints={Array []}
    fetchEndpoints={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    fetchFilters={[MockFunction]}
    filters={Array []}
    newEndpoint={[MockFunction]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    toggleEndpoint={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <LoadingState
        placeholder={
          <Skeleton
            size="lg"
          />
        }
      >
        <Table
          aria-label="Notifications list"
          header={
            Array [
              "Name",
              "URL",
              "Active",
              "Filters",
              "Actions",
            ]
          }
          rows={Array []}
        >
          <TableHeader />
          <TableBody />
        </Table>
      </LoadingState>,
      "rightBar": <IndexToolbar
        onClick={[MockFunction]}
      />,
      "title": "Notifications",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Table
          aria-label="Notifications list"
          header={
            Array [
              "Name",
              "URL",
              "Active",
              "Filters",
              "Actions",
            ]
          }
          rows={Array []}
        >
          <TableHeader />
          <TableBody />
        </Table>,
        "loading": undefined,
        "placeholder": <Skeleton
          size="lg"
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "aria-label": "Notifications list",
          "children": Array [
            <TableHeader />,
            <TableBody />,
          ],
          "header": Array [
            "Name",
            "URL",
            "Active",
            "Filters",
            "Actions",
          ],
          "rows": Array [],
          "variant": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <LoadingState
          placeholder={
            <Skeleton
              size="lg"
            />
          }
        >
          <Table
            aria-label="Notifications list"
            header={
              Array [
                "Name",
                "URL",
                "Active",
                "Filters",
                "Actions",
              ]
            }
            rows={Array []}
          >
            <TableHeader />
            <TableBody />
          </Table>
        </LoadingState>,
        "rightBar": <IndexToolbar
          onClick={[MockFunction]}
        />,
        "title": "Notifications",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Table
            aria-label="Notifications list"
            header={
              Array [
                "Name",
                "URL",
                "Active",
                "Filters",
                "Actions",
              ]
            }
            rows={Array []}
          >
            <TableHeader />
            <TableBody />
          </Table>,
          "loading": undefined,
          "placeholder": <Skeleton
            size="lg"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "aria-label": "Notifications list",
            "children": Array [
              <TableHeader />,
              <TableBody />,
            ],
            "header": Array [
              "Name",
              "URL",
              "Active",
              "Filters",
              "Actions",
            ],
            "rows": Array [],
            "variant": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`NotificationsIndex takes endpoints 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NotificationsIndex
    deleteEndpoint={[MockFunction]}
    endpoints={
      Array [
        Object {
          "active": true,
          "filtersCount": 2,
          "id": 1,
          "name": "TEST Endpoint #1",
          "url": "http://endpoint.com",
        },
        Object {
          "active": true,
          "filtersCount": 1,
          "id": 2,
          "name": "TEST Endpoint #2",
          "url": "http://endpoint2.com",
        },
        Object {
          "active": false,
          "filtersCount": 4,
          "id": 3,
          "name": "TEST Endpoint #3",
          "url": "http://endpoint3.com",
        },
      ]
    }
    fetchEndpoints={
      [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    fetchFilters={[MockFunction]}
    filters={Array []}
    newEndpoint={[MockFunction]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    toggleEndpoint={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <LoadingState
        placeholder={
          <Skeleton
            size="lg"
          />
        }
      >
        <Table
          aria-label="Notifications list"
          header={
            Array [
              "Name",
              "URL",
              "Active",
              "Filters",
              "Actions",
            ]
          }
          rows={
            Array [
              Object {
                "cells": Array [
                  "TEST Endpoint #1",
                  "http://endpoint.com",
                  <EndpointToggle
                    active={true}
                    id={1}
                    onChange={[Function]}
                  />,
                  2,
                  <withRouter(NotificationActions)
                    endpointId={1}
                    onDelete={[Function]}
                  />,
                ],
              },
              Object {
                "cells": Array [
                  "TEST Endpoint #2",
                  "http://endpoint2.com",
                  <EndpointToggle
                    active={true}
                    id={2}
                    onChange={[Function]}
                  />,
                  1,
                  <withRouter(NotificationActions)
                    endpointId={2}
                    onDelete={[Function]}
                  />,
                ],
              },
              Object {
                "cells": Array [
                  "TEST Endpoint #3",
                  "http://endpoint3.com",
                  <EndpointToggle
                    active={false}
                    id={3}
                    onChange={[Function]}
                  />,
                  4,
                  <withRouter(NotificationActions)
                    endpointId={3}
                    onDelete={[Function]}
                  />,
                ],
              },
            ]
          }
        >
          <TableHeader />
          <TableBody />
        </Table>
      </LoadingState>,
      "rightBar": <IndexToolbar
        onClick={[MockFunction]}
      />,
      "title": "Notifications",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Table
          aria-label="Notifications list"
          header={
            Array [
              "Name",
              "URL",
              "Active",
              "Filters",
              "Actions",
            ]
          }
          rows={
            Array [
              Object {
                "cells": Array [
                  "TEST Endpoint #1",
                  "http://endpoint.com",
                  <EndpointToggle
                    active={true}
                    id={1}
                    onChange={[Function]}
                  />,
                  2,
                  <withRouter(NotificationActions)
                    endpointId={1}
                    onDelete={[Function]}
                  />,
                ],
              },
              Object {
                "cells": Array [
                  "TEST Endpoint #2",
                  "http://endpoint2.com",
                  <EndpointToggle
                    active={true}
                    id={2}
                    onChange={[Function]}
                  />,
                  1,
                  <withRouter(NotificationActions)
                    endpointId={2}
                    onDelete={[Function]}
                  />,
                ],
              },
              Object {
                "cells": Array [
                  "TEST Endpoint #3",
                  "http://endpoint3.com",
                  <EndpointToggle
                    active={false}
                    id={3}
                    onChange={[Function]}
                  />,
                  4,
                  <withRouter(NotificationActions)
                    endpointId={3}
                    onDelete={[Function]}
                  />,
                ],
              },
            ]
          }
        >
          <TableHeader />
          <TableBody />
        </Table>,
        "loading": undefined,
        "placeholder": <Skeleton
          size="lg"
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "aria-label": "Notifications list",
          "children": Array [
            <TableHeader />,
            <TableBody />,
          ],
          "header": Array [
            "Name",
            "URL",
            "Active",
            "Filters",
            "Actions",
          ],
          "rows": Array [
            Object {
              "cells": Array [
                "TEST Endpoint #1",
                "http://endpoint.com",
                <EndpointToggle
                  active={true}
                  id={1}
                  onChange={[Function]}
                />,
                2,
                <withRouter(NotificationActions)
                  endpointId={1}
                  onDelete={[Function]}
                />,
              ],
            },
            Object {
              "cells": Array [
                "TEST Endpoint #2",
                "http://endpoint2.com",
                <EndpointToggle
                  active={true}
                  id={2}
                  onChange={[Function]}
                />,
                1,
                <withRouter(NotificationActions)
                  endpointId={2}
                  onDelete={[Function]}
                />,
              ],
            },
            Object {
              "cells": Array [
                "TEST Endpoint #3",
                "http://endpoint3.com",
                <EndpointToggle
                  active={false}
                  id={3}
                  onChange={[Function]}
                />,
                4,
                <withRouter(NotificationActions)
                  endpointId={3}
                  onDelete={[Function]}
                />,
              ],
            },
          ],
          "variant": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <LoadingState
          placeholder={
            <Skeleton
              size="lg"
            />
          }
        >
          <Table
            aria-label="Notifications list"
            header={
              Array [
                "Name",
                "URL",
                "Active",
                "Filters",
                "Actions",
              ]
            }
            rows={
              Array [
                Object {
                  "cells": Array [
                    "TEST Endpoint #1",
                    "http://endpoint.com",
                    <EndpointToggle
                      active={true}
                      id={1}
                      onChange={[Function]}
                    />,
                    2,
                    <withRouter(NotificationActions)
                      endpointId={1}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #2",
                    "http://endpoint2.com",
                    <EndpointToggle
                      active={true}
                      id={2}
                      onChange={[Function]}
                    />,
                    1,
                    <withRouter(NotificationActions)
                      endpointId={2}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #3",
                    "http://endpoint3.com",
                    <EndpointToggle
                      active={false}
                      id={3}
                      onChange={[Function]}
                    />,
                    4,
                    <withRouter(NotificationActions)
                      endpointId={3}
                      onDelete={[Function]}
                    />,
                  ],
                },
              ]
            }
          >
            <TableHeader />
            <TableBody />
          </Table>
        </LoadingState>,
        "rightBar": <IndexToolbar
          onClick={[MockFunction]}
        />,
        "title": "Notifications",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Table
            aria-label="Notifications list"
            header={
              Array [
                "Name",
                "URL",
                "Active",
                "Filters",
                "Actions",
              ]
            }
            rows={
              Array [
                Object {
                  "cells": Array [
                    "TEST Endpoint #1",
                    "http://endpoint.com",
                    <EndpointToggle
                      active={true}
                      id={1}
                      onChange={[Function]}
                    />,
                    2,
                    <withRouter(NotificationActions)
                      endpointId={1}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #2",
                    "http://endpoint2.com",
                    <EndpointToggle
                      active={true}
                      id={2}
                      onChange={[Function]}
                    />,
                    1,
                    <withRouter(NotificationActions)
                      endpointId={2}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #3",
                    "http://endpoint3.com",
                    <EndpointToggle
                      active={false}
                      id={3}
                      onChange={[Function]}
                    />,
                    4,
                    <withRouter(NotificationActions)
                      endpointId={3}
                      onDelete={[Function]}
                    />,
                  ],
                },
              ]
            }
          >
            <TableHeader />
            <TableBody />
          </Table>,
          "loading": undefined,
          "placeholder": <Skeleton
            size="lg"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "aria-label": "Notifications list",
            "children": Array [
              <TableHeader />,
              <TableBody />,
            ],
            "header": Array [
              "Name",
              "URL",
              "Active",
              "Filters",
              "Actions",
            ],
            "rows": Array [
              Object {
                "cells": Array [
                  "TEST Endpoint #1",
                  "http://endpoint.com",
                  <EndpointToggle
                    active={true}
                    id={1}
                    onChange={[Function]}
                  />,
                  2,
                  <withRouter(NotificationActions)
                    endpointId={1}
                    onDelete={[Function]}
                  />,
                ],
              },
              Object {
                "cells": Array [
                  "TEST Endpoint #2",
                  "http://endpoint2.com",
                  <EndpointToggle
                    active={true}
                    id={2}
                    onChange={[Function]}
                  />,
                  1,
                  <withRouter(NotificationActions)
                    endpointId={2}
                    onDelete={[Function]}
                  />,
                ],
              },
              Object {
                "cells": Array [
                  "TEST Endpoint #3",
                  "http://endpoint3.com",
                  <EndpointToggle
                    active={false}
                    id={3}
                    onChange={[Function]}
                  />,
                  4,
                  <withRouter(NotificationActions)
                    endpointId={3}
                    onDelete={[Function]}
                  />,
                ],
              },
            ],
            "variant": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
