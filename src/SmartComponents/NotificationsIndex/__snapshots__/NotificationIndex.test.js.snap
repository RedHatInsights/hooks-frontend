// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotificationsIndex expect to render an EmptyState by default (with no endpoints) 1`] = `
<withRouter(NotificationsPage)
  showBreadcrumb={false}
  title="Hooks"
>
  <LoadingState
    placeholder={
      <Skeleton
        size="lg"
      />
    }
  >
    <Bullseye
      className=""
      component="div"
    >
      <EmptyState>
        <p>
          <EmptyStateIcon
            icon={[Function]}
          />
        </p>
        <Title
          size="lg"
        >
          No hooks found
        </Title>
        <EmptyStateBody>
          There are no hooks configured yet.
        </EmptyStateBody>
        <Button
          component={[Function]}
          onClick={[MockFunction]}
          to="/new"
          variant="primary"
        >
          New hook
        </Button>
      </EmptyState>
    </Bullseye>
  </LoadingState>
</withRouter(NotificationsPage)>
`;

exports[`NotificationsIndex takes endpoints 1`] = `
<withRouter(NotificationsPage)
  showBreadcrumb={false}
  title="Hooks"
>
  <LoadingState
    placeholder={
      <Skeleton
        size="lg"
      />
    }
  >
    <Split
      className=""
      component={[Function]}
      gutter={null}
    >
      <SplitItem
        className=""
        isFilled={true}
      >
        <ToolbarGroup
          className={null}
        >
          <ToolbarItem
            className={null}
          >
            <TextInput
              aria-label="Filter endpoints"
              className=""
              isDisabled={false}
              isReadOnly={false}
              isRequired={false}
              isValid={true}
              onChange={[Function]}
              placeholder="Filter by name or url"
              type="text"
              value=""
            />
          </ToolbarItem>
          <ToolbarItem
            className={null}
            style={
              Object {
                "marginLeft": "var(--pf-global--spacer--lg)",
              }
            }
          >
            <Button
              component={[Function]}
              onClick={[MockFunction]}
              to="/new"
            >
              New hook
            </Button>
          </ToolbarItem>
        </ToolbarGroup>
      </SplitItem>
      <SplitItem
        className=""
        isFilled={false}
      >
        <Pagination
          className=""
          dropDirection="down"
          itemCount={1}
          itemsEnd={null}
          itemsStart={null}
          onFirstClick={[Function]}
          onLastClick={[Function]}
          onNextClick={[Function]}
          onPageInput={[Function]}
          onPerPageSelect={[Function]}
          onPreviousClick={[Function]}
          onSetPage={[Function]}
          page={1}
          perPage={10}
          perPageOptions={
            Array [
              Object {
                "title": "10",
                "value": 10,
              },
              Object {
                "title": "20",
                "value": 20,
              },
              Object {
                "title": "50",
                "value": 50,
              },
              Object {
                "title": "100",
                "value": 100,
              },
            ]
          }
          titles={
            Object {
              "currPage": "Current page",
              "items": "items",
              "itemsPerPage": "Items per page",
              "optionsToggle": "Select",
              "pages": "pages",
              "paginationTitle": "Pagination",
              "perPageSuffix": "per page",
              "toFirstPage": "Go to first page",
              "toLastPage": "Go to last page",
              "toNextPage": "Go to next page",
              "toPreviousPage": "Go to previous page",
            }
          }
          toggleTemplate={[Function]}
          variant="top"
          widgetId="pagination-options-menu-bottom"
        />
      </SplitItem>
    </Split>
    <Table
      aria-label="Hooks list"
      borders={true}
      cells={
        Array [
          Object {
            "key": "name",
            "title": "Name",
            "transforms": Array [
              [Function],
            ],
          },
          "Type",
          Object {
            "key": "url",
            "title": "Path",
            "transforms": Array [
              [Function],
            ],
          },
          "Status",
          Object {
            "key": "active",
            "title": "Active",
            "transforms": Array [
              [Function],
            ],
          },
          "",
        ]
      }
      className=""
      contentId="expanded-content"
      dropdownDirection="down"
      dropdownPosition="right"
      expandId="expandable-toggle"
      gridBreakPoint="grid-md"
      onCollapse={null}
      onExpand={null}
      onSort={[Function]}
      rowLabeledBy="simple-node"
      rows={
        Array [
          Array [
            Object {
              "title": "Test 1",
            },
            Object {
              "title": "HTTP",
            },
            Object {
              "title": "http://whatever.com",
            },
            Object {
              "title": "true",
            },
            Object {
              "title": "true",
            },
            Object {
              "title": "actions",
            },
          ],
          Array [
            Object {
              "title": "Test 2",
            },
            Object {
              "title": "HTTP",
            },
            Object {
              "title": "http://whatever1.com",
            },
            Object {
              "title": "true",
            },
            Object {
              "title": "true",
            },
            Object {
              "title": "actions",
            },
          ],
          Array [
            Object {
              "title": "Test 3",
            },
            Object {
              "title": "HTTP",
            },
            Object {
              "title": "http://whatever2.com",
            },
            Object {
              "title": "true",
            },
            Object {
              "title": "true",
            },
            Object {
              "title": "actions",
            },
          ],
        ]
      }
      sortBy={
        Object {
          "direction": "asc",
          "index": 0,
        }
      }
      variant={null}
    >
      <TableHeader
        className=""
      />
      <TableBody
        className=""
        onRowClick={[Function]}
        rowKey="id"
      />
    </Table>
    <Split
      className=""
      component={[Function]}
      gutter={null}
    >
      <SplitItem
        className=""
        isFilled={true}
      />
      <SplitItem
        className=""
        isFilled={false}
      >
        <Pagination
          className=""
          dropDirection="down"
          itemCount={1}
          itemsEnd={null}
          itemsStart={null}
          onFirstClick={[Function]}
          onLastClick={[Function]}
          onNextClick={[Function]}
          onPageInput={[Function]}
          onPerPageSelect={[Function]}
          onPreviousClick={[Function]}
          onSetPage={[Function]}
          page={1}
          perPage={10}
          perPageOptions={
            Array [
              Object {
                "title": "10",
                "value": 10,
              },
              Object {
                "title": "20",
                "value": 20,
              },
              Object {
                "title": "50",
                "value": 50,
              },
              Object {
                "title": "100",
                "value": 100,
              },
            ]
          }
          titles={
            Object {
              "currPage": "Current page",
              "items": "items",
              "itemsPerPage": "Items per page",
              "optionsToggle": "Select",
              "pages": "pages",
              "paginationTitle": "Pagination",
              "perPageSuffix": "per page",
              "toFirstPage": "Go to first page",
              "toLastPage": "Go to last page",
              "toNextPage": "Go to next page",
              "toPreviousPage": "Go to previous page",
            }
          }
          toggleTemplate={[Function]}
          variant="top"
          widgetId="pagination-options-menu-bottom"
        />
      </SplitItem>
    </Split>
  </LoadingState>
</withRouter(NotificationsPage)>
`;
