// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotificationsPage expect to render  1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NotificationsPage
    appendix={
      <strong>
        A footer
      </strong>
    }
    showBreadcrumb={true}
    title="Something"
  >
    content
  </NotificationsPage>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <PageHeader>
          <Breadcrumb
            aria-label="Breadcrumb"
            className=""
            style={
              Object {
                "marginLeft": "calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)",
              }
            }
          >
            
            <BreadcrumbItem
              className=""
              component="a"
              isActive={true}
              style={
                Object {
                  "marginTop": 0,
                }
              }
              target={null}
              to={null}
            >
              Something
            </BreadcrumbItem>
          </Breadcrumb>
          <PageHeaderTitle
            title="Something"
          />
        </PageHeader>,
        <Stack
          className=""
          component="div"
          gutter={null}
        >
          <StackItem
            className=""
            isFilled={false}
          >
            <Connect(Main)>
              content
            </Connect(Main)>
          </StackItem>
          <StackItem
            className=""
            isFilled={false}
          >
            <strong>
              A footer
            </strong>
          </StackItem>
        </Stack>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Breadcrumb
              aria-label="Breadcrumb"
              className=""
              style={
                Object {
                  "marginLeft": "calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)",
                }
              }
            >
              
              <BreadcrumbItem
                className=""
                component="a"
                isActive={true}
                style={
                  Object {
                    "marginTop": 0,
                  }
                }
                target={null}
                to={null}
              >
                Something
              </BreadcrumbItem>
            </Breadcrumb>,
            <PageHeaderTitle
              title="Something"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "aria-label": "Breadcrumb",
              "children": Array [
                "",
                <BreadcrumbItem
                  className=""
                  component="a"
                  isActive={true}
                  style={
                    Object {
                      "marginTop": 0,
                    }
                  }
                  target={null}
                  to={null}
                >
                  Something
                </BreadcrumbItem>,
              ],
              "className": "",
              "style": Object {
                "marginLeft": "calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)",
              },
            },
            "ref": null,
            "rendered": Array [
              "",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "Something",
                  "className": "",
                  "component": "a",
                  "isActive": true,
                  "style": Object {
                    "marginTop": 0,
                  },
                  "target": null,
                  "to": null,
                },
                "ref": null,
                "rendered": "Something",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "title": "Something",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <StackItem
              className=""
              isFilled={false}
            >
              <Connect(Main)>
                content
              </Connect(Main)>
            </StackItem>,
            <StackItem
              className=""
              isFilled={false}
            >
              <strong>
                A footer
              </strong>
            </StackItem>,
          ],
          "className": "",
          "component": "div",
          "gutter": null,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Connect(Main)>
                content
              </Connect(Main)>,
              "className": "",
              "isFilled": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "content",
                "style": undefined,
              },
              "ref": null,
              "rendered": "content",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <strong>
                A footer
              </strong>,
              "className": "",
              "isFilled": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "A footer",
              },
              "ref": null,
              "rendered": "A footer",
              "type": "strong",
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <PageHeader>
            <Breadcrumb
              aria-label="Breadcrumb"
              className=""
              style={
                Object {
                  "marginLeft": "calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)",
                }
              }
            >
              
              <BreadcrumbItem
                className=""
                component="a"
                isActive={true}
                style={
                  Object {
                    "marginTop": 0,
                  }
                }
                target={null}
                to={null}
              >
                Something
              </BreadcrumbItem>
            </Breadcrumb>
            <PageHeaderTitle
              title="Something"
            />
          </PageHeader>,
          <Stack
            className=""
            component="div"
            gutter={null}
          >
            <StackItem
              className=""
              isFilled={false}
            >
              <Connect(Main)>
                content
              </Connect(Main)>
            </StackItem>
            <StackItem
              className=""
              isFilled={false}
            >
              <strong>
                A footer
              </strong>
            </StackItem>
          </Stack>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Breadcrumb
                aria-label="Breadcrumb"
                className=""
                style={
                  Object {
                    "marginLeft": "calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)",
                  }
                }
              >
                
                <BreadcrumbItem
                  className=""
                  component="a"
                  isActive={true}
                  style={
                    Object {
                      "marginTop": 0,
                    }
                  }
                  target={null}
                  to={null}
                >
                  Something
                </BreadcrumbItem>
              </Breadcrumb>,
              <PageHeaderTitle
                title="Something"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "aria-label": "Breadcrumb",
                "children": Array [
                  "",
                  <BreadcrumbItem
                    className=""
                    component="a"
                    isActive={true}
                    style={
                      Object {
                        "marginTop": 0,
                      }
                    }
                    target={null}
                    to={null}
                  >
                    Something
                  </BreadcrumbItem>,
                ],
                "className": "",
                "style": Object {
                  "marginLeft": "calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)",
                },
              },
              "ref": null,
              "rendered": Array [
                "",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "Something",
                    "className": "",
                    "component": "a",
                    "isActive": true,
                    "style": Object {
                      "marginTop": 0,
                    },
                    "target": null,
                    "to": null,
                  },
                  "ref": null,
                  "rendered": "Something",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "title": "Something",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <StackItem
                className=""
                isFilled={false}
              >
                <Connect(Main)>
                  content
                </Connect(Main)>
              </StackItem>,
              <StackItem
                className=""
                isFilled={false}
              >
                <strong>
                  A footer
                </strong>
              </StackItem>,
            ],
            "className": "",
            "component": "div",
            "gutter": null,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Connect(Main)>
                  content
                </Connect(Main)>,
                "className": "",
                "isFilled": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "content",
                  "style": undefined,
                },
                "ref": null,
                "rendered": "content",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <strong>
                  A footer
                </strong>,
                "className": "",
                "isFilled": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "A footer",
                },
                "ref": null,
                "rendered": "A footer",
                "type": "strong",
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
